# Generated by Django 4.2.1 on 2024-03-28 15:51

from django.conf import settings
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('role', models.PositiveSmallIntegerField(choices=[(0, 'Пользователь'), (1, 'Тренер'), (2, 'Продавец'), (3, 'Админ')], default=0, verbose_name='Роль')),
                ('email_code', models.CharField(blank=True, max_length=5, verbose_name='Email Код')),
                ('degree', models.PositiveSmallIntegerField(choices=[(0, 'Любитель'), (1, 'Профессионал')], default=0, verbose_name='Уровень мастерства')),
                ('rating', models.IntegerField(default=0, verbose_name='Рейтинг')),
                ('google', models.TextField(blank=True, verbose_name='Google')),
                ('phone', models.CharField(blank=True, max_length=20, verbose_name='Телефон')),
                ('surname', models.CharField(blank=True, max_length=100, verbose_name='Фамилия')),
                ('notify', models.BooleanField(default=False, verbose_name='Уведомлять ли юзера')),
                ('date_payment', models.DateField(blank=True, null=True, verbose_name='Дата последнего платежа')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Дата создания')),
            ],
            options={
                'verbose_name': 'Пользователь',
                'verbose_name_plural': 'Пользователи',
            },
        ),
        migrations.CreateModel(
            name='Confirmation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('email', models.CharField(default='', max_length=100)),
                ('code', models.CharField(default='', max_length=6)),
            ],
        ),
        migrations.CreateModel(
            name='Court',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='Название')),
                ('address', models.CharField(max_length=255, verbose_name='Адрес')),
                ('price', models.DecimalField(decimal_places=2, max_digits=10, verbose_name='Цена')),
            ],
            options={
                'verbose_name': 'Корт',
                'verbose_name_plural': 'Корты',
            },
        ),
        migrations.CreateModel(
            name='CourtFacility',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text', models.TextField(verbose_name='Описание')),
            ],
            options={
                'verbose_name': 'Удобство площадки',
                'verbose_name_plural': 'Удобства площадок',
            },
        ),
        migrations.CreateModel(
            name='Match',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('scheduled_start', models.DateTimeField(verbose_name='Запланированное время начала')),
                ('actual_start', models.DateTimeField(blank=True, null=True, verbose_name='Фактическое время начала')),
                ('duration', models.DurationField(blank=True, null=True, verbose_name='Продолжительность')),
                ('status', models.PositiveSmallIntegerField(choices=[(0, 'Запланирован'), (1, 'В процессе'), (2, 'Завершен')], default=0, verbose_name='Статус')),
            ],
            options={
                'verbose_name': 'Матч',
                'verbose_name_plural': 'Матчи',
            },
        ),
        migrations.CreateModel(
            name='Plan',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='Наименование')),
                ('price_month', models.DecimalField(decimal_places=2, default=0.0, max_digits=10, verbose_name='Цена (в месяц)')),
                ('price_half_year', models.DecimalField(decimal_places=2, default=0.0, max_digits=10, verbose_name='Цена (в полгода)')),
                ('price_year', models.DecimalField(decimal_places=2, default=0.0, max_digits=10, verbose_name='Цена (в год)')),
            ],
            options={
                'verbose_name': 'План подписки',
                'verbose_name_plural': 'Планы подписок',
            },
        ),
        migrations.CreateModel(
            name='Sport',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='Название')),
                ('image', models.ImageField(default='default_sport.jpg', upload_to='sports_images/', verbose_name='Изображение')),
            ],
            options={
                'verbose_name': 'Вид спорта',
                'verbose_name_plural': 'Виды спорта',
            },
        ),
        migrations.CreateModel(
            name='Subscription',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_monthly', models.BooleanField(default=True, verbose_name='Ежемесечная подписка')),
                ('start_date', models.DateTimeField(verbose_name='Начало действия')),
                ('end_date', models.DateTimeField(verbose_name='Конец действия')),
                ('is_auto_renew', models.BooleanField(default=True, verbose_name='Автопродление')),
                ('plan', models.ForeignKey(on_delete=django.db.models.deletion.RESTRICT, related_name='subscriptions', to='main.plan', verbose_name='План')),
            ],
            options={
                'verbose_name': 'Подписка',
                'verbose_name_plural': 'Подписки',
            },
        ),
        migrations.CreateModel(
            name='Team',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='Название')),
                ('logo', models.ImageField(default='default_logo.jpg', upload_to='team_logos/', verbose_name='Логотип')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Дата создания')),
            ],
            options={
                'verbose_name': 'Команда',
                'verbose_name_plural': 'Команды',
            },
        ),
        migrations.CreateModel(
            name='Tournament',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='Название')),
                ('description', models.TextField(verbose_name='Описание')),
                ('enter_price', models.IntegerField(verbose_name='Цена участия')),
                ('prize_pool', models.IntegerField(verbose_name='Призовой фонд')),
                ('rules', models.TextField(verbose_name='Правила')),
                ('max_participants_amount', models.IntegerField(default=4, verbose_name='Максимальное количество участников')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Дата создания')),
                ('owner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='owned_tournaments', to=settings.AUTH_USER_MODEL, verbose_name='Владелец')),
            ],
            options={
                'verbose_name': 'Турнир',
                'verbose_name_plural': 'Турниры',
            },
        ),
        migrations.CreateModel(
            name='TournamentPlace',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='Название')),
            ],
            options={
                'verbose_name': 'Место проведения турнира',
                'verbose_name_plural': 'Места проведения турниров',
            },
        ),
        migrations.CreateModel(
            name='Transaction',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('amount', models.DecimalField(decimal_places=2, max_digits=10, verbose_name='Сумма')),
                ('type', models.PositiveSmallIntegerField(verbose_name='Тип')),
                ('date_time', models.DateTimeField(verbose_name='Дата совершения')),
                ('is_paid', models.BooleanField(default=False, verbose_name='Завершена')),
                ('subscription', models.ForeignKey(null=True, on_delete=django.db.models.deletion.RESTRICT, related_name='transaction', to='main.subscription', verbose_name='Подписка')),
                ('user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='transactions', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Транзакция',
                'verbose_name_plural': 'Транзакции',
            },
        ),
        migrations.CreateModel(
            name='TournamentStage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('start', models.DateTimeField(verbose_name='Начало этапа')),
                ('name', models.CharField(max_length=255, verbose_name='Название этапа')),
                ('tournament', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='stages', to='main.tournament', verbose_name='Турнир')),
            ],
            options={
                'verbose_name': 'Этап турнира',
                'verbose_name_plural': 'Этапы турниров',
            },
        ),
        migrations.AddField(
            model_name='tournament',
            name='place',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tournaments', to='main.tournamentplace', verbose_name='Место проведения'),
        ),
        migrations.AddField(
            model_name='tournament',
            name='sport',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main.sport', verbose_name='Вид спорта'),
        ),
        migrations.AddField(
            model_name='tournament',
            name='teams',
            field=models.ManyToManyField(related_name='tournaments', to='main.team', verbose_name='Команды'),
        ),
        migrations.AddField(
            model_name='tournament',
            name='users',
            field=models.ManyToManyField(related_name='tournaments', to=settings.AUTH_USER_MODEL, verbose_name='Участники'),
        ),
        migrations.CreateModel(
            name='TeamMemberRole',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='Название роли')),
                ('sport', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main.sport', verbose_name='Вид спорта')),
            ],
            options={
                'verbose_name': 'Роль в команде',
                'verbose_name_plural': 'Роли в командах',
            },
        ),
        migrations.CreateModel(
            name='TeamMember',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('role', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main.teammemberrole', verbose_name='Роль')),
                ('team', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='members', to='main.team', verbose_name='Команда')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Пользователь')),
            ],
            options={
                'verbose_name': 'Член команды',
                'verbose_name_plural': 'Члены команд',
            },
        ),
        migrations.CreateModel(
            name='New',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text', models.TextField(verbose_name='Текст')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Дата создания')),
                ('tournament', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='news', to='main.tournament', verbose_name='Турнир')),
            ],
            options={
                'verbose_name': 'Новость',
                'verbose_name_plural': 'Новости',
            },
        ),
        migrations.CreateModel(
            name='MatchParticipant',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('score', models.IntegerField(default=0, verbose_name='Счет')),
                ('result', models.PositiveSmallIntegerField(blank=True, choices=[(0, 'Победа'), (1, 'Поражение'), (2, 'Ничья')], null=True, verbose_name='Результат')),
                ('match', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='participants', to='main.match')),
                ('participant', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Участник матча',
                'verbose_name_plural': 'Участники матчей',
            },
        ),
        migrations.AddField(
            model_name='match',
            name='tournament_stage',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='matches', to='main.tournamentstage', verbose_name='Этап турнира'),
        ),
        migrations.AddField(
            model_name='match',
            name='winner',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='won_matches', to=settings.AUTH_USER_MODEL, verbose_name='Победитель'),
        ),
        migrations.CreateModel(
            name='CourtReview',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('star', models.IntegerField(verbose_name='Рейтинг')),
                ('text', models.TextField(verbose_name='Отзыв')),
                ('court', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reviews', to='main.court', verbose_name='Площадка')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='court_reviews', to=settings.AUTH_USER_MODEL, verbose_name='Пользователь')),
            ],
            options={
                'verbose_name': 'Отзыв о площадке',
                'verbose_name_plural': 'Отзывы о площадках',
            },
        ),
        migrations.CreateModel(
            name='CourtBook',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('start', models.DateTimeField(verbose_name='Начало бронирования')),
                ('court', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='bookings', to='main.court', verbose_name='Площадка')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='court_books', to=settings.AUTH_USER_MODEL, verbose_name='Пользователь')),
            ],
            options={
                'verbose_name': 'Бронирование площадки',
                'verbose_name_plural': 'Бронирования площадок',
            },
        ),
        migrations.AddField(
            model_name='court',
            name='facilities',
            field=models.ManyToManyField(related_name='courts', to='main.courtfacility', verbose_name='Удобства'),
        ),
        migrations.AddField(
            model_name='court',
            name='owner',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='owned_courts', to=settings.AUTH_USER_MODEL, verbose_name='Владелец'),
        ),
        migrations.CreateModel(
            name='AmateurMatch',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('start', models.DateTimeField()),
                ('address', models.CharField(max_length=255)),
                ('lat', models.FloatField()),
                ('lon', models.FloatField()),
                ('enter_price', models.IntegerField()),
                ('opponent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='opponent_amateur_matches', to=settings.AUTH_USER_MODEL)),
                ('owner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='owned_amateur_matches', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Любительский матч',
                'verbose_name_plural': 'Любительские матчи',
            },
        ),
        migrations.AddField(
            model_name='user',
            name='active_subscription',
            field=models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='user_active_subscription', to='main.subscription', verbose_name='Активная подписка'),
        ),
        migrations.AddField(
            model_name='user',
            name='groups',
            field=models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups'),
        ),
        migrations.AddField(
            model_name='user',
            name='interested_sports',
            field=models.ManyToManyField(to='main.sport', verbose_name='Интересующие виды спорта'),
        ),
        migrations.AddField(
            model_name='user',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions'),
        ),
    ]
